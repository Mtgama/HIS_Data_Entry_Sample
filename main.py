# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ocr_newUI_12_sqlversion.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

from configparser import ConfigParser
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
import codecs
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtCore import QUrl
import qdarkstyle
from PyQt5 import QtCore, QtGui, QtWidgets
import socket
from cryptography.fernet import Fernet
import sys
from PyQt5 import QtCore, QtGui, QtWidgets,uic
from PyQt5.QtWidgets import *
import requests
import speech_recognition as sr
import os
import pandas as pd
import openpyxl
import json
import re
import enchant
from PyQt5.QtGui import QKeySequence,QStandardItemModel, QStandardItem, QColor
from PyPDF2 import PdfFileReader
from docx import Document
import os
import difflib
from datetime import datetime
import hashlib
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtNetwork import QTcpSocket
from openpyxl import load_workbook
from PyQt5.QtCore import *
import codecs
from hashlib import sha256

class LoginDialog(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Login")
        self.setGeometry(400, 400, 300, 150)

        layout = QVBoxLayout()

        self.username_label = QLabel("Username:")
        self.username_edit = QLineEdit(self)

        self.password_label = QLabel("Password:")
        self.password_edit = QLineEdit(self)
        self.password_edit.setEchoMode(QLineEdit.Password)

        self.login_button = QPushButton("Login", self)
        self.login_button.clicked.connect(self.check_login)
        layout.addWidget(self.username_label)
        layout.addWidget(self.username_edit)
        layout.addWidget(self.password_label)
        layout.addWidget(self.password_edit)
        layout.addWidget(self.login_button)

        self.setLayout(layout)

    def check_login(self):
        username = self.username_edit.text()
        password = self.password_edit.text()

        try:
            # Connect to the SQLite database
            conn = sqlite3.connect('./database/datapass.db')
            cursor = conn.cursor()

            # Query the database for the username and password
            cursor.execute("SELECT password FROM users WHERE username = ?", (username,))
            result = cursor.fetchone()

            if result:
                hashed_password = result[0]
                # Verify the password
                if hashlib.sha256(password.encode()).hexdigest() == hashed_password:
                    self.accept()
                    return

            # If username or password is incorrect
            QMessageBox.warning(self, 'Username or Password Error', "Username or password is not valid!")

        except Exception as e:
            QMessageBox.critical(self, 'Error', f"An error occurred: {str(e)}")

        finally:
            # Close the connection
            conn.close()

class DeleteDataDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Delete Data")
        self.setGeometry(400, 400, 300, 200)

        layout = QVBoxLayout()

        self.file_select_button = QPushButton("Select Database File", self)
        self.file_select_button.clicked.connect(self.select_database_file)

        self.table_list = QListWidget()
        self.table_list.itemClicked.connect(self.show_table_data)

        self.data_table = QTableWidget()
        self.data_table.setColumnCount(0)
        self.data_table.setRowCount(0)

        self.delete_button = QPushButton("Delete Selected", self)
        self.delete_button.clicked.connect(self.delete_selected)

        layout.addWidget(self.file_select_button)
        layout.addWidget(self.table_list)
        layout.addWidget(self.data_table)
        layout.addWidget(self.delete_button)

        self.setLayout(layout)

    def select_database_file(self):
        try:
                file_path, _ = QFileDialog.getOpenFileName(self, "Select Database File", "", "SQLite Database Files (*.db *.sqlite *.sqlite3)")
                if file_path:
                        self.conn = sqlite3.connect(file_path)
                        self.cursor = self.conn.cursor()
                        self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                        tables = self.cursor.fetchall()
                        for table in tables:
                                self.table_list.addItem(table[0])
        except Exception as e:
                QMessageBox.critical(self, 'Error', f"An error occurred: {str(e)}")

    def show_table_data(self, item):
        table_name = item.text()
        self.cursor.execute(f"SELECT * FROM {table_name};")
        rows = self.cursor.fetchall()
        self.data_table.clear()
        self.data_table.setRowCount(len(rows))
        self.data_table.setColumnCount(len(rows[0]))
        for i, row in enumerate(rows):
                for j, val in enumerate(row):
                        self.data_table.setItem(i, j, QTableWidgetItem(str(val)))
                # Disable the delete button if the row count is less than 2
        self.delete_button.setEnabled(len(rows) >= 2)

    def delete_selected(self):
        selected_items = self.data_table.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, 'No Selection', "Please select an item to delete.")
            return

        row_index = selected_items[0].row()
        table_name = self.table_list.currentItem().text()
        row_id = self.data_table.item(row_index, 0).text()  # Assuming the first column is the row ID
        try:
            self.cursor.execute(f"DELETE FROM {table_name} WHERE id = ?", (row_id,))
            self.conn.commit()
            QMessageBox.information(self, 'Deletion Successful', "Selected item deleted successfully.")
            self.show_table_data(self.table_list.currentItem())  # Refresh table data after deletion
        except Exception as e:
            QMessageBox.critical(self, 'Error', f"An error occurred: {str(e)}")

    def closeEvent(self, event):
            try:
                if self.conn:
                        self.conn.close()
            except:
                    QMessageBox.warning(self, 'No Selection', "Please select an item to delete.")
                    

# In your main application class where you define the button:                    
class RegisterDialog(QDialog):
    def __init__(self):
        super().__init__()
        
        self.setWindowTitle("Register New User")
        self.setGeometry(400, 400, 300, 150)
        
        layout = QVBoxLayout()
        
        self.username_label = QLabel("Username:")
        self.username_edit = QLineEdit(self)
        
        self.password_label = QLabel("Password:")
        self.password_edit = QLineEdit(self)
        self.password_edit.setEchoMode(QLineEdit.Password)
        
        self.register_button = QPushButton("Register", self)
        self.register_button.clicked.connect(self.register_user)
        
        layout.addWidget(self.username_label)
        layout.addWidget(self.username_edit)
        layout.addWidget(self.password_label)
        layout.addWidget(self.password_edit)
        layout.addWidget(self.register_button)
        
        self.setLayout(layout)
    
    def register_user(self):
        username = self.username_edit.text()
        password = self.password_edit.text()
        
        # Hash the password using SHA-256
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        
        try:
            # Connect to the SQLite database
            conn = sqlite3.connect('./database/datapass.db')
            cursor = conn.cursor()
            
            # Create a table if it doesn't exist
            cursor.execute('''CREATE TABLE IF NOT EXISTS users
                              (id INTEGER PRIMARY KEY AUTOINCREMENT,
                               username TEXT NOT NULL,
                               password TEXT NOT NULL)''')
            
            # Insert the username and hashed password into the table
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
            
            # Commit the transaction
            conn.commit()
            
            QMessageBox.information(self, 'Registration Successful', "User registered successfully.")
            self.accept()
            
        except Exception as e:
            QMessageBox.critical(self, 'Error', f"An error occurred: {str(e)}")
            
        finally:
            # Close the connection
            conn.close()
class ClientThread(QThread):
    message_received = pyqtSignal(str)

    def __init__(self, client_socket):
        super().__init__()
        self.client_socket = client_socket

    def run(self):
        while True:
            message = self.client_socket.recv(1024).decode()
            if not message:
                break
            self.message_received.emit(message) 

class Ui_Form(object):
    def setupUi(self, Form):
        self.database_path = None
        self.Form = Form
        self.ui = Form
        self.client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        Form.resize(1238, 732)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./image/text-recognising.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.checkBox = QtWidgets.QCheckBox(Form)
        self.checkBox.setStyleSheet("background-color: rgb(170, 170, 255);")
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_7.addWidget(self.checkBox)
        self.fontComboBox_2 = QtWidgets.QFontComboBox(Form)
        self.fontComboBox_2.setStyleSheet("background-color: rgb(170, 170, 255);")
        self.fontComboBox_2.setObjectName("fontComboBox_2")
        self.horizontalLayout_7.addWidget(self.fontComboBox_2)
        self.pushButton_14 = QtWidgets.QPushButton(Form)
        self.pushButton_14.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_14.setObjectName("pushButton_14")
        self.horizontalLayout_7.addWidget(self.pushButton_14)
        self.pushButton_9 = QtWidgets.QPushButton(Form)
        self.pushButton_9.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout_7.addWidget(self.pushButton_9)
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem)
        self.lineEdit_11 = QtWidgets.QLineEdit(Form)
        self.lineEdit_11.setStyleSheet("background-color: rgb(246, 146, 249);")
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.horizontalLayout_7.addWidget(self.lineEdit_11)
        self.label_23 = QtWidgets.QLabel(Form)
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_7.addWidget(self.label_23)
        self.gridLayout_2.addLayout(self.horizontalLayout_7, 0, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(Form)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.tab)
        self.lineEdit.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout_4.addWidget(self.lineEdit)
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_4.addWidget(self.label_3)
        self.comboBox = QtWidgets.QComboBox(self.tab)
        self.comboBox.setStyleSheet("font: 87 8pt \"Arial Black\";\n"
"background-color: rgb(202, 255, 227);\n"
"   ")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_4.addWidget(self.comboBox)
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_4.addWidget(self.label_2)
        self.textEdit = QtWidgets.QTextEdit(self.tab)
        self.textEdit.setStyleSheet("\n"
"background-color: rgb(202, 255, 227);")
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout_4.addWidget(self.textEdit)
        self.label_4 = QtWidgets.QLabel(self.tab)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_2.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout_4.addWidget(self.lineEdit_2)
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.verticalLayout_4.addLayout(self.verticalLayout_14)
        self.label_26 = QtWidgets.QLabel(self.tab)
        self.label_26.setObjectName("label_26")
        self.verticalLayout_4.addWidget(self.label_26)
        self.lineEdit_12 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_12.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.verticalLayout_4.addWidget(self.lineEdit_12)
        self.line = QtWidgets.QFrame(self.tab)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_4.addWidget(self.line)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.tab)
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setToolTip("")
        self.pushButton_3.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(255, 255, 127);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(245, 245, 122);\n"
"            }\n"
"        \n"
"")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("./image/OCR_Button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon1)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_3.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_4.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(255, 255, 127);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(245, 245, 122);\n"
"            }\n"
"        \n"
"")
        self.pushButton_4.setIcon(icon1)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_3.addWidget(self.pushButton_4)
        self.pushButton = QtWidgets.QPushButton(self.tab)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(255, 170, 0);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(225, 150, 0);\n"
"            }\n"
"        \n"
"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("./image/microphone_Button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon2)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.verticalLayout_3.addLayout(self.verticalLayout_4)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_5 = QtWidgets.QLabel(self.tab)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.listWidget = QtWidgets.QListWidget(self.tab)
        self.listWidget.setStyleSheet("\n"
"\n"
"\n"
"QListWidget {\n"
"    background-color:rgb(202, 255, 227);\n"
"    border: 1px solid #dcdcdc;\n"
"}\n"
"\n"
"QListWidget::item {\n"
"    padding: 5px;\n"
"}\n"
"\n"
"QListWidget::item:selected {\n"
"    background-color: #3498db;\n"
"    color: white;\n"
"}\n"
"\n"
"QListWidget::item:hover {\n"
"    background-color: #e0e0e0;\n"
"    color: #333333;\n"
"}\n"
"\n"
"QListWidget::item:selected:active {\n"
"    background-color: #2980b9;\n"
"    color: white;\n"
"}\n"
"")
        self.listWidget.setObjectName("listWidget")
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        self.verticalLayout.addWidget(self.listWidget)
        self.label_6 = QtWidgets.QLabel(self.tab)
        self.label_6.setObjectName("label_6")
        self.verticalLayout.addWidget(self.label_6)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_3.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout.addWidget(self.lineEdit_3)
        self.pushButton_2 = QtWidgets.QPushButton(self.tab)
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 255, 255);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(153, 229, 229);\n"
"            }\n"
"        \n"
"")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("./image/add_file_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.line_3 = QtWidgets.QFrame(self.tab)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout.addWidget(self.line_3)
        self.pushButton_7 = QtWidgets.QPushButton(self.tab)
        self.pushButton_7.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_7.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 255, 255);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(153, 229, 229);\n"
"            }\n"
"        \n"
"")
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout.addWidget(self.pushButton_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.tab)
        self.pushButton_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_8.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 255, 255);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(153, 229, 229);\n"
"            }\n"
"        \n"
"")
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout.addWidget(self.pushButton_8)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout_2.setStretch(0, 5)
        self.gridLayout_3.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_3)
        self.pushButton_5 = QtWidgets.QPushButton(self.tab)
        self.pushButton_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_5.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: green;\n"
"                color: white;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: darkgreen;\n"
"            }\n"
"\n"
"")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("./image/excel_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon4)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_2.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.tab)
        self.pushButton_6.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_6.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: green;\n"
"                color: white;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: darkgreen;\n"
"            }\n"
"\n"
"")
        self.pushButton_6.setIcon(icon4)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_2.addWidget(self.pushButton_6)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.tab_2)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setContentsMargins(-1, -1, -1, 0)
        self.horizontalLayout_4.setSpacing(6)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.label_8 = QtWidgets.QLabel(self.tab_2)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_11.addWidget(self.label_8)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.horizontalLayout_10.addLayout(self.horizontalLayout_11)
        self.verticalLayout_12.addLayout(self.horizontalLayout_10)
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_13.addLayout(self.horizontalLayout_9)
        self.verticalLayout_12.addLayout(self.verticalLayout_13)
        self.pushButton_11 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_11.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(85, 85, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_11.setObjectName("pushButton_11")
        self.verticalLayout_12.addWidget(self.pushButton_11)
        self.pushButton_10 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_10.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(85, 85, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_10.setObjectName("pushButton_10")
        self.verticalLayout_12.addWidget(self.pushButton_10)
        self.horizontalLayout_8.addLayout(self.verticalLayout_12)
        self.verticalLayout_11.addLayout(self.horizontalLayout_8)
        self.verticalLayout_10.addLayout(self.verticalLayout_11)
        self.verticalLayout_8.addLayout(self.verticalLayout_10)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.line_6 = QtWidgets.QFrame(self.tab_2)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.verticalLayout_9.addWidget(self.line_6)
        self.label_9 = QtWidgets.QLabel(self.tab_2)
        self.label_9.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.label_9.setObjectName("label_9")
        self.verticalLayout_9.addWidget(self.label_9)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_4.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout_9.addWidget(self.lineEdit_4)
        self.pushButton_15 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_15.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(85, 85, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_15.setObjectName("pushButton_15")
        self.verticalLayout_9.addWidget(self.pushButton_15)
        self.pushButton_16 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_16.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(85, 85, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_16.setObjectName("pushButton_16")
        self.verticalLayout_9.addWidget(self.pushButton_16)
        self.verticalLayout_8.addLayout(self.verticalLayout_9)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pushButton_19 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_19.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_19.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(255, 0, 0);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 10pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(255, 105, 105);\n"
"            }\n"
"        \n"
"\n"
"")
        self.pushButton_19.setObjectName("pushButton_19")
        self.gridLayout_4.addWidget(self.pushButton_19, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem1, 3, 0, 1, 1)
        self.checkBox_2 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_2.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.checkBox_2.setObjectName("checkBox_2")
        self.gridLayout_4.addWidget(self.checkBox_2, 1, 0, 1, 1)
        self.line_7 = QtWidgets.QFrame(self.tab_2)
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.gridLayout_4.addWidget(self.line_7, 0, 0, 1, 1)
        self.verticalLayout_7.addLayout(self.gridLayout_4)
        self.verticalLayout_8.addLayout(self.verticalLayout_7)
        self.horizontalLayout_4.addLayout(self.verticalLayout_8)
        self.horizontalLayout_6.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.line_2 = QtWidgets.QFrame(self.tab_2)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_13.addWidget(self.line_2)
        self.horizontalLayout_6.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_12.addItem(spacerItem2)
        self.label_13 = QtWidgets.QLabel(self.tab_2)
        self.label_13.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";\n"
"background-color: rgb(250, 255, 140);")
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_12.addWidget(self.label_13)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_12.addItem(spacerItem3)
        self.verticalLayout_6.addLayout(self.horizontalLayout_12)
        self.line_8 = QtWidgets.QFrame(self.tab_2)
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_8.setObjectName("line_8")
        self.verticalLayout_6.addWidget(self.line_8)
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.label_10 = QtWidgets.QLabel(self.tab_2)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_15.addWidget(self.label_10)
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.tab_2)
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.verticalLayout_15.addWidget(self.plainTextEdit_2)
        self.verticalLayout_6.addLayout(self.verticalLayout_15)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_11 = QtWidgets.QLabel(self.tab_2)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_17.addWidget(self.label_11)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.tab_2)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.verticalLayout_17.addWidget(self.plainTextEdit)
        self.verticalLayout_6.addLayout(self.verticalLayout_17)
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.label_12 = QtWidgets.QLabel(self.tab_2)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_16.addWidget(self.label_12)
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(self.tab_2)
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.verticalLayout_16.addWidget(self.plainTextEdit_3)
        self.pushButton_17 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_17.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(85, 85, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_17.setObjectName("pushButton_17")
        self.verticalLayout_16.addWidget(self.pushButton_17)
        self.pushButton_27 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_27.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(85, 85, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_27.setObjectName("pushButton_27")
        self.verticalLayout_16.addWidget(self.pushButton_27)
        self.label_7 = QtWidgets.QLabel(self.tab_2)
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_16.addWidget(self.label_7)
        self.label_14 = QtWidgets.QLabel(self.tab_2)
        self.label_14.setText("")
        self.label_14.setObjectName("label_14")
        self.verticalLayout_16.addWidget(self.label_14)
        self.verticalLayout_6.addLayout(self.verticalLayout_16)
        self.verticalLayout_5.addLayout(self.verticalLayout_6)
        self.horizontalLayout_5.addLayout(self.verticalLayout_5)
        self.horizontalLayout_6.addLayout(self.horizontalLayout_5)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_3)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout()
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.checkBox_3 = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_3.setObjectName("checkBox_3")
        self.verticalLayout_22.addWidget(self.checkBox_3)
        self.radioButton_2 = QtWidgets.QRadioButton(self.tab_3)
        self.radioButton_2.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.radioButton_2.setObjectName("radioButton_2")
        self.verticalLayout_22.addWidget(self.radioButton_2)
        self.radioButton_4 = QtWidgets.QRadioButton(self.tab_3)
        self.radioButton_4.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.radioButton_4.setObjectName("radioButton_4")
        self.verticalLayout_22.addWidget(self.radioButton_4)
        self.radioButton_3 = QtWidgets.QRadioButton(self.tab_3)
        self.radioButton_3.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.radioButton_3.setObjectName("radioButton_3")
        self.verticalLayout_22.addWidget(self.radioButton_3)
        self.radioButton = QtWidgets.QRadioButton(self.tab_3)
        self.radioButton.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout_22.addWidget(self.radioButton)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout_22.addItem(spacerItem4)
        self.label_20 = QtWidgets.QLabel(self.tab_3)
        self.label_20.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.label_20.setObjectName("label_20")
        self.verticalLayout_22.addWidget(self.label_20)
        self.horizontalSlider = QtWidgets.QSlider(self.tab_3)
        self.horizontalSlider.setStyleSheet("\n"
"            QSlider::groove:horizontal {\n"
"               background-color: rgb(170, 170, 255);\n"
"                height: 8px;\n"
"                margin: 2px 0;\n"
"            }\n"
"\n"
"            QSlider::handle:horizontal {\n"
"                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,\n"
"                    stop:0 #a3a3a3, stop:1 #ffffff);\n"
"                border: 1px solid #777;\n"
"                width: 15px;\n"
"                margin: -2px 0;\n"
"                border-radius: 3px;\n"
"            }\n"
"    ")
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_22.addWidget(self.horizontalSlider)
        self.line_5 = QtWidgets.QFrame(self.tab_3)
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.verticalLayout_22.addWidget(self.line_5)
        self.label_21 = QtWidgets.QLabel(self.tab_3)
        self.label_21.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.label_21.setObjectName("label_21")
        self.verticalLayout_22.addWidget(self.label_21)
        self.plainTextEdit_5 = QtWidgets.QPlainTextEdit(self.tab_3)
        self.plainTextEdit_5.setStyleSheet("background-color: rgb(205, 205, 255);")
        self.plainTextEdit_5.setObjectName("plainTextEdit_5")
        self.verticalLayout_22.addWidget(self.plainTextEdit_5)
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.pushButton_24 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_24.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_24.setObjectName("pushButton_24")
        self.horizontalLayout_19.addWidget(self.pushButton_24)
        self.pushButton_18 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_18.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_18.setObjectName("pushButton_18")
        self.horizontalLayout_19.addWidget(self.pushButton_18)
        self.verticalLayout_22.addLayout(self.horizontalLayout_19)
        self.line_4 = QtWidgets.QFrame(self.tab_3)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.verticalLayout_22.addWidget(self.line_4)
        self.label_22 = QtWidgets.QLabel(self.tab_3)
        self.label_22.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";")
        self.label_22.setObjectName("label_22")
        self.verticalLayout_22.addWidget(self.label_22)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_10.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.horizontalLayout_20.addWidget(self.lineEdit_10)
        self.pushButton_25 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_25.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 255, 255);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(153, 229, 229);\n"
"            }\n"
"        \n"
"")
        self.pushButton_25.setObjectName("pushButton_25")
        self.horizontalLayout_20.addWidget(self.pushButton_25)
        self.verticalLayout_22.addLayout(self.horizontalLayout_20)
        self.pushButton_26 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_26.setStyleSheet("\n"
"\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_26.setObjectName("pushButton_26")
        self.verticalLayout_22.addWidget(self.pushButton_26)
        self.pushButton_28 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_28.setStyleSheet("\n"
"\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"                font: 75 9pt \"MS Shell Dlg 2\";\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        self.pushButton_28.setObjectName("pushButton_28")
        self.verticalLayout_22.addWidget(self.pushButton_28)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_22.addItem(spacerItem5)
        self.horizontalLayout_14.addLayout(self.verticalLayout_22)
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.horizontalLayout_14.addLayout(self.verticalLayout_21)
        self.gridLayout_5.addLayout(self.horizontalLayout_14, 0, 0, 1, 1)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout()
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.label_15 = QtWidgets.QLabel(self.tab_3)
        self.label_15.setObjectName("label_15")
        self.verticalLayout_19.addWidget(self.label_15)
        self.calendarWidget = QtWidgets.QCalendarWidget(self.tab_3)
        self.calendarWidget.setStyleSheet("QCalendarWidget QWidget#qt_calendar_navigationbar {\n"
"background-color: #333;\n"
"}\n"
"\n"
"QCalendarWidget QAbstractItemView {\n"
"selection-background-color: #FF6464;\n"
"selection-color: white;\n"
"} \n"
"\n"
"QCalendarWidget QAbstractItemView:disabled {\n"
"color: #666;\n"
"}\n"
"")
        self.calendarWidget.setObjectName("calendarWidget")
        self.verticalLayout_19.addWidget(self.calendarWidget)
        self.verticalLayout_18.addLayout(self.verticalLayout_19)
        self.horizontalLayout_15.addLayout(self.verticalLayout_18)
        self.gridLayout_5.addLayout(self.horizontalLayout_15, 0, 1, 1, 1)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.tab_4)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.pushButton_21 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_21.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./image/send_message_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_21.setIcon(icon5)
        self.pushButton_21.setObjectName("pushButton_21")
        self.horizontalLayout_16.addWidget(self.pushButton_21)
        self.pushButton_20 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_20.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(170, 170, 255);\n"
"                color: black;\n"
"                border-radius: 5px;\n"
"                padding: 5px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(145, 145, 217);\n"
"            }\n"
"        \n"
"")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("./image/add_file_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_20.setIcon(icon6)
        self.pushButton_20.setObjectName("pushButton_20")
        self.horizontalLayout_16.addWidget(self.pushButton_20)
        self.horizontalLayout_16.setStretch(0, 15)
        self.horizontalLayout_16.setStretch(1, 1)
        self.gridLayout_7.addLayout(self.horizontalLayout_16, 4, 0, 1, 1)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_7.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 20px;\n"
"                                        padding: 0 10px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 28px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_7.setText("")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.gridLayout_7.addWidget(self.lineEdit_7, 3, 0, 1, 1)
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout()
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.label_16 = QtWidgets.QLabel(self.tab_4)
        self.label_16.setObjectName("label_16")
        self.verticalLayout_24.addWidget(self.label_16)
        self.plainTextEdit_4 = QtWidgets.QPlainTextEdit(self.tab_4)
        self.plainTextEdit_4.setStyleSheet("background-color: rgb(235, 255, 255);")
        self.plainTextEdit_4.setReadOnly(True)
        self.plainTextEdit_4.setObjectName("plainTextEdit_4")
        self.verticalLayout_24.addWidget(self.plainTextEdit_4)
        self.verticalLayout_23.addLayout(self.verticalLayout_24)
        self.gridLayout_6.addLayout(self.verticalLayout_23, 0, 0, 1, 1)
        self.gridLayout_7.addLayout(self.gridLayout_6, 1, 0, 1, 1)
        self.verticalLayout_25 = QtWidgets.QVBoxLayout()
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_8.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.horizontalLayout_18.addWidget(self.lineEdit_8)
        self.pushButton_23 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_23.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(255, 170, 0);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(225, 150, 0);\n"
"            }\n"
"        \n"
"")
        self.pushButton_23.setObjectName("pushButton_23")
        self.horizontalLayout_18.addWidget(self.pushButton_23)
        self.label_17 = QtWidgets.QLabel(self.tab_4)
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_18.addWidget(self.label_17)
        spacerItem6 = QtWidgets.QSpacerItem(45, 15, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_18.addItem(spacerItem6)
        self.verticalLayout_25.addLayout(self.horizontalLayout_18)
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_9.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.horizontalLayout_17.addWidget(self.lineEdit_9)
        self.pushButton_22 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_22.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(255, 170, 0);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(225, 150, 0);\n"
"            }\n"
"        \n"
"")
        self.pushButton_22.setObjectName("pushButton_22")
        self.horizontalLayout_17.addWidget(self.pushButton_22)
        self.label_18 = QtWidgets.QLabel(self.tab_4)
        self.label_18.setObjectName("label_18")
        self.horizontalLayout_17.addWidget(self.label_18)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_17.addItem(spacerItem7)
        self.verticalLayout_25.addLayout(self.horizontalLayout_17)
        self.gridLayout_7.addLayout(self.verticalLayout_25, 0, 0, 1, 1)
        self.label_19 = QtWidgets.QLabel(self.tab_4)
        self.label_19.setObjectName("label_19")
        self.gridLayout_7.addWidget(self.label_19, 2, 0, 1, 1)
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.tab_5)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.pushButton_12 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_12.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: green;\n"
"                color: white;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: darkgreen;\n"
"            }\n"
"\n"
"")
        self.pushButton_12.setObjectName("pushButton_12")
        self.gridLayout_8.addWidget(self.pushButton_12, 8, 0, 1, 1)
        self.label_25 = QtWidgets.QLabel(self.tab_5)
        self.label_25.setObjectName("label_25")
        self.gridLayout_8.addWidget(self.label_25, 0, 0, 1, 1)
        self.label_28 = QtWidgets.QLabel(self.tab_5)
        self.label_28.setObjectName("label_28")
        self.gridLayout_8.addWidget(self.label_28, 4, 0, 1, 1)
        self.label_27 = QtWidgets.QLabel(self.tab_5)
        self.label_27.setObjectName("label_27")
        self.gridLayout_8.addWidget(self.label_27, 2, 0, 1, 1)
        self.lineEdit_14 = QtWidgets.QLineEdit(self.tab_5)
        self.lineEdit_14.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.gridLayout_8.addWidget(self.lineEdit_14, 3, 0, 1, 1)
        self.lineEdit_13 = QtWidgets.QLineEdit(self.tab_5)
        self.lineEdit_13.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(202, 255, 227);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.gridLayout_8.addWidget(self.lineEdit_13, 1, 0, 1, 1)
        self.plainTextEdit_6 = QtWidgets.QPlainTextEdit(self.tab_5)
        self.plainTextEdit_6.setStyleSheet("\n"
"background-color: rgb(202, 255, 227);\n"
"")
        self.plainTextEdit_6.setObjectName("plainTextEdit_6")
        self.gridLayout_8.addWidget(self.plainTextEdit_6, 5, 0, 1, 1)
        self.pushButton_13 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_13.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: green;\n"
"                color: white;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: darkgreen;\n"
"            }\n"
"\n"
"")
        self.pushButton_13.setObjectName("pushButton_13")
        self.gridLayout_8.addWidget(self.pushButton_13, 7, 0, 1, 1)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.pushButton_30 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_30.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: green;\n"
"                color: white;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: darkgreen;\n"
"            }\n"
"\n"
"")
        self.pushButton_30.setObjectName("pushButton_30")
        self.horizontalLayout_21.addWidget(self.pushButton_30)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab_5)
        self.lineEdit_5.setStyleSheet("QLineEdit{ \n"
"                                        background-color:rgb(205, 205, 255);\n"
"                                        border: 2px solid gray;\n"
"                                        border-radius: 10px;\n"
"                                        padding: 0 8px;\n"
"                                        selection-background-color: darkgray;\n"
"                                        font-size: 16px;}\n"
"                                        QLineEdit:focus { \n"
"                                        background-color:rgb(192, 192, 255);}\n"
"                                        ")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.horizontalLayout_21.addWidget(self.lineEdit_5)
        self.label_29 = QtWidgets.QLabel(self.tab_5)
        self.label_29.setLineWidth(19)
        self.label_29.setMidLineWidth(5)
        self.label_29.setTextFormat(QtCore.Qt.AutoText)
        self.label_29.setScaledContents(False)
        self.label_29.setObjectName("label_29")
        self.horizontalLayout_21.addWidget(self.label_29)
        self.gridLayout_8.addLayout(self.horizontalLayout_21, 6, 0, 1, 1)
        self.gridLayout_9.addLayout(self.gridLayout_8, 0, 0, 1, 1)
        self.pushButton_29 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_29.setStyleSheet("\n"
"            QPushButton {\n"
"                background-color: rgb(255, 170, 0);\n"
"                color: black;\n"
"                border-radius: 10px;\n"
"                padding: 10px;\n"
"                transition: background-color 0.3s;\n"
"            }\n"
"\n"
"            QPushButton:hover {\n"
"                background-color: rgb(225, 150, 0);\n"
"            }\n"
"        \n"
"")
        self.pushButton_29.setObjectName("pushButton_29")
        self.gridLayout_9.addWidget(self.pushButton_29, 1, 0, 1, 1)
        self.tabWidget.addTab(self.tab_5, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 1, 0, 1, 1)
        self.label_24 = QtWidgets.QLabel(Form)
        self.label_24.setObjectName("label_24")
        self.gridLayout_2.addWidget(self.label_24, 2, 0, 1, 1)

        self.retranslateUi(Form)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "پذیرش هوشمند"))
        self.checkBox.setText(_translate("Form", "حالت تاریک"))
        self.pushButton_14.setText(_translate("Form", "اطلاعات من"))
        self.pushButton_9.setText(_translate("Form", "خروج"))
        self.lineEdit_11.setToolTip(_translate("Form", "خطا های برنامه رو کپی و برای کارشناس مربوطه ارسال کنید."))
        self.label_23.setText(_translate("Form", "خطا های برنامه:"))
        self.label.setText(_translate("Form", "نام و نام خانوادگی:"))
        self.label_3.setText(_translate("Form", "جنسیت:"))
        self.comboBox.setItemText(0, _translate("Form", "نامعلوم"))
        self.comboBox.setItemText(1, _translate("Form", "مرد"))
        self.comboBox.setItemText(2, _translate("Form", "زن"))
        self.label_2.setText(_translate("Form", "شرح بیمار:"))
        self.label_4.setText(_translate("Form", "شماره همراه:"))
        self.label_26.setText(_translate("Form", "کد ملی:"))
        self.pushButton_3.setText(_translate("Form", "استخراج متن"))
        self.pushButton_4.setToolTip(_translate("Form", "استخراج متن از تصویر"))
        self.pushButton_4.setText(_translate("Form", "انتخاب تصویر - OCR"))
        self.pushButton.setToolTip(_translate("Form", "تایپ صوتی "))
        self.pushButton.setText(_translate("Form", "تایپ صوتی"))
        self.label_5.setText(_translate("Form", "برچسب ها:"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(0)
        item.setText(_translate("Form", "سرطان"))
        item = self.listWidget.item(1)
        item.setText(_translate("Form", "ایدز"))
        item = self.listWidget.item(2)
        item.setText(_translate("Form", "ریه"))
        item = self.listWidget.item(3)
        item.setText(_translate("Form", "بیمار ترخیص شده"))
        item = self.listWidget.item(4)
        item.setText(_translate("Form", "بیمار بستری"))
        item = self.listWidget.item(5)
        item.setText(_translate("Form", "بیمار سرپایی"))
        item = self.listWidget.item(6)
        item.setText(_translate("Form", "بیمه "))
        item = self.listWidget.item(7)
        item.setText(_translate("Form", "ریه"))
        item = self.listWidget.item(8)
        item.setText(_translate("Form", "انتوبه"))
        item = self.listWidget.item(9)
        item.setText(_translate("Form", "مشکل در پرداخت"))
        item = self.listWidget.item(10)
        item.setText(_translate("Form", "چشم"))
        item = self.listWidget.item(11)
        item.setText(_translate("Form", "گوش"))
        item = self.listWidget.item(12)
        item.setText(_translate("Form", "تخت فعال"))
        item = self.listWidget.item(13)
        item.setText(_translate("Form", "قطه عضو"))
        item = self.listWidget.item(14)
        item.setText(_translate("Form", "اهدای عضو"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.label_6.setText(_translate("Form", "اضافه کردن برچسب:"))
        self.pushButton_2.setToolTip(_translate("Form", "برچسب های دلخواه را اضافه کنید"))
        self.pushButton_2.setText(_translate("Form", "اضافه کن"))
        self.pushButton_7.setToolTip(_translate("Form", "برچسب های خود را ذخیره کنید تا بعدن مجدد استفاده کنید."))
        self.pushButton_7.setText(_translate("Form", "ذخیره کردن برچسب ها"))
        self.pushButton_8.setToolTip(_translate("Form", "واردن کردن برچسب های ذخیره شده"))
        self.pushButton_8.setText(_translate("Form", "بارگذاری برچسب ها"))
        self.pushButton_5.setToolTip(_translate("Form", "ذخیره داده ها با فرمت اکسل"))
        self.pushButton_5.setText(_translate("Form", "ذخیره بصورت اکسل"))
        self.pushButton_6.setToolTip(_translate("Form", "وارد کردن داده ها از اکسل به برنامه"))
        self.pushButton_6.setText(_translate("Form", "لود کردن پرونده ذخیره شده"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Form", "پرونده"))
        self.label_8.setText(_translate("Form", "بروز رسانی اطلاعات کاربر:"))
        self.pushButton_11.setText(_translate("Form", "حذف نام کاربری و اطلاعات از پایگاه داده "))
        self.pushButton_10.setText(_translate("Form", "ایجاد نام کاربری و رمز عبور جدید"))
        self.label_9.setText(_translate("Form", "رمز گذاری فایل ( این بخش در دست تکمیل است)"))
        self.pushButton_15.setText(_translate("Form", "رمز گذاری فایل"))
        self.pushButton_16.setText(_translate("Form", "رمز گشایی فایل"))
        self.pushButton_19.setToolTip(_translate("Form", "از اسکن پرونده های حساس خودداری کنید!"))
        self.pushButton_19.setText(_translate("Form", "اسکن پرونده با آنتی ویروس"))
        self.checkBox_2.setText(_translate("Form", "برنامه رو قفل کن"))
        self.label_13.setText(_translate("Form", "بررسی جعل در سند"))
        self.label_10.setText(_translate("Form", "محتویات فایل اول:"))
        self.label_11.setText(_translate("Form", "محتویات فایل دوم:"))
        self.label_12.setText(_translate("Form", "مقایسه تغییرات فایل ها:"))
        self.pushButton_17.setText(_translate("Form", "انتخاب فایل های مشکوک"))
        self.pushButton_27.setText(_translate("Form", "بررسی تغییرات"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Form", "امنیت"))
        self.checkBox_3.setText(_translate("Form", "حالت فوکوس"))
        self.radioButton_2.setText(_translate("Form", "تم شماره 1"))
        self.radioButton_4.setText(_translate("Form", "تم شماره 2"))
        self.radioButton_3.setText(_translate("Form", "تم شماره 3"))
        self.radioButton.setText(_translate("Form", "تم کور رنگی"))
        self.label_20.setText(_translate("Form", "میزان شفافیت پنجره:"))
        self.label_21.setText(_translate("Form", "یادداشت های شما"))
        self.pushButton_24.setText(_translate("Form", "لود کرن یادداشت"))
        self.pushButton_18.setText(_translate("Form", "ذخیره یادداشت"))
        self.label_22.setToolTip(_translate("Form", "کلمات پرکاربرد را جهت نشان دادن لغات پیشنهادی به برنامه اضافه کنید."))
        self.label_22.setText(_translate("Form", "اضافه کردن کلمات پر کاربرد:"))
        self.pushButton_25.setText(_translate("Form", "اضافه کن"))
        self.pushButton_26.setText(_translate("Form", "مشاهده کلمات اضافه شده به برنامه"))
        self.pushButton_28.setText(_translate("Form", "بستن پنجره"))
        self.label_15.setText(_translate("Form", "تاریخ امروز:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Form", "ظاهر"))
        self.pushButton_21.setText(_translate("Form", "ارسال پیام"))
        self.pushButton_20.setText(_translate("Form", "درج سند"))
        self.label_16.setText(_translate("Form", "صفحه ارتباط با کارشناس مربوطه:"))
        self.pushButton_23.setText(_translate("Form", "پورت"))
        self.label_17.setText(_translate("Form", "پورت را وارد کنید:"))
        self.pushButton_22.setText(_translate("Form", "IP"))
        self.label_18.setText(_translate("Form", "ای پی را وارد کنید:"))
        self.label_19.setText(_translate("Form", "ارسال پیام:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("Form", "ارتباط با کارشناس ای تی"))
        self.pushButton_12.setText(_translate("Form", "لود کردن دیتا در پرونده"))
        self.label_25.setText(_translate("Form", "کد ملی:"))
        self.label_28.setText(_translate("Form", "نمایش دیتای کاربر:"))
        self.label_27.setText(_translate("Form", "شماره تلفن :"))
        self.plainTextEdit_6.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.pushButton_13.setText(_translate("Form", "ایجاد پایگاه داده"))
        self.pushButton_30.setText(_translate("Form", "انتخاب مسیر"))
        self.lineEdit_5.setToolTip(_translate("Form", "آدرس مسیر پایگاه داده را کپی کنید"))
        self.label_29.setText(_translate("Form", "مسیر پایگاه داده رو وارد کنید:"))
        self.pushButton_29.setText(_translate("Form", "ذخیره اطلاعات در دیتابیس"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("Form", "دیتابیس"))
        self.label_24.setText(_translate("Form", "Power By : Mehrdad Hasanzade - MedofileTeam"))
        self.checkBox_2.stateChanged.connect(self.lock_application)
        config = ConfigParser()
        config.read('settings.ini')
        if 'DEFAULT' in config and 'database_path' in config['DEFAULT']:
            self.database_path = config['DEFAULT']['database_path']

        # Connect to the database if path is already set
        if self.database_path:
            try:
                conn = sqlite3.connect(self.database_path)
            except sqlite3.Error as e:
                QMessageBox.critical(self.Form, "Error", f"Connection error: {e}")
                self.database_path = None
        self.model = QStandardItemModel()
        try:
            self.word_list = self.load_word_list()
        except:
            pass
        self.horizontalSlider.setMinimum(30)
        self.horizontalSlider.setMaximum(100)
       
        #Connect_Button
        self.pushButton.clicked.connect(self.voicerc)
        self.pushButton_4.clicked.connect(self.select_file)
        self.pushButton_4.clicked.connect(self.convert_file)
        self.pushButton_3.clicked.connect(self.analyze_text)
        self.pushButton_5.clicked.connect(self.save_exel)
        self.pushButton_6.clicked.connect(self.load_exel)
        
        self.checkBox.stateChanged.connect(self.save_dark_theme_state)
        self.pushButton_9.clicked.connect(self.exit)
        self.listWidget.itemClicked.connect(self.showwoed)
        self.shortcut_open = QShortcut(QKeySequence('Ctrl+r'), self.Form)
        self.shortcut_open.activated.connect(self.remove_word)
        self.pushButton_2.clicked.connect(self.addword)
        self.listWidget.itemClicked.connect(self.add_word_to_text_edit)
        self.pushButton_7.clicked.connect(self.save_words)
        self.pushButton_8.clicked.connect(self.load_words)
        self.fontComboBox_2.currentFontChanged.connect(self.set_message_font)
        self.pushButton_17.clicked.connect(self.select_files)
        self.pushButton_27.clicked.connect(self.compare_files)
        self.pushButton_25.clicked.connect(self.add_word_to_file)
        self.checkBox_3.stateChanged.connect(self.toggle_fullscreen)
        self.horizontalSlider.valueChanged.connect(self.opacity)
        self.pushButton_28.clicked.connect(self.close_win)
        self.pushButton_18.clicked.connect(self.save_txt_note)
        self.pushButton_10.clicked.connect(self.open_register_dialog)
        self.pushButton_24.clicked.connect(self.load_txt_note)
        self.pushButton_26.clicked.connect(self.read_words_from)
        words = self.read_words_from_file("data.json")
        completer = QCompleter(words)
        completer.setCaseSensitivity(Qt.CaseInsensitive)
        self.lineEdit.setCompleter(completer)
        self.pushButton_11.clicked.connect(self.open_delete_data_dialog)
        self.lineEdit.returnPressed.connect(self.add_word_to_file)
        self.pushButton_19.clicked.connect(self.open_webview)
        self.pushButton_13.clicked.connect(self.save_to_database)
        self.pushButton_29.clicked.connect(self.add_to_database)
        self.pushButton_21.clicked.connect(self.send_message)
        self.pushButton_12.clicked.connect(self.find_user)
        self.pushButton_30.clicked.connect(self.select_database_file)
        self.load_dark_theme_state()
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect(("127.0.0.1", 9090))

            self.message_thread = ClientThread(self.client_socket)
            self.message_thread.message_received.connect(self.display_message)
            self.message_thread.start()    
        except:
            self.lineEdit_11.setText('اتصال با کارشناس ای تی برقرار نیست')
        
        self.register_button = QPushButton("Register New User")
        self.register_button.clicked.connect(self.open_register_dialog)   
    def opacity(self,value):
        opacity = value / 100
        self.Form.setWindowOpacity(opacity)    
    def toggle_fullscreen(self, state):
        if state == 2:  # Checked state
            self.Form.showFullScreen()
            
        else:
            self.Form.showNormal()
            

    def exit_fullscreen(self):
        self.checkbox_3.setCheckState(0)  # Uncheck the checkbox
        self.showNormal()
            
        
    def set_message_font(self):
            font = self.fontComboBox_2.currentFont()
            self.textEdit.setFont(font) 
            self.lineEdit.setFont(font)
            self.lineEdit_2.setFont(font)
            self.plainTextEdit_4.setFont(font)
            self.lineEdit_7.setFont(font)
            self.plainTextEdit_5.setFont(font)
            
    
           
        
        #function
    def select_file(self):
        try:
            x = QtWidgets.QInputDialog.getText(self.Form,'واردن کردن تصویر',"لینک تصویر را وراد کنید:")[0]
            
            url = "https://www.eboo.ir/api/ocr/getway"
            data = {
                    "token": "Hwrr12Fmwo1K8NTWW5kZJ5pQp7dYIkKb",
                    "command": "addfile",
                    "filelink": x
                    }

            response = requests.post(url, data=data)
            
            if response.status_code == 200:
                server_output = response.text
        # قرار دادن متن در qplaintextedit_2
                self.lineEdit_11.setText(server_output)
                
                
                
            else:
                self.lineEdit_11.setText("server error")
        
        except:
            QMessageBox.information(self.Form,"لینک خالی","لینک خالی است!")
    
        

    def convert_file(self):
        try:
      

            url = "https://www.eboo.ir/api/ocr/getway"
            api_token = "Hwrr12Fmwo1K8NTWW5kZJ5pQp7dYIkKb"

            # ثبت فایل
            
            
            payload = {'token': api_token, 'command': 'addfile'}
            response = requests.post(url, data=payload)
                
            
            if response.status_code == 200:
                data1 = self.lineEdit_11.text()
                token_regex = r'(?<="FileToken":")\w+'

                match = re.search(token_regex, data1)
                if match:
                    token = match.group()
                    QMessageBox.information(self.Form, "Token Extraction", "توکن دریافت شد! بر روی دکمه ok کلیک کنید و صبر کنید...")
                else:
                    QMessageBox.warning(self.Form, "Token Extraction", "Token not found")
                try: # تبدیل فایل
                    payload = {
                        'token': api_token,
                        'filelink': data1,
                        'command': 'convert',
                        'filetoken': token,
                        'method': 4,
                        'output': "txtraw"  # تغییر فرمت خروجی به txt
                    }
                except:
                    QMessageBox.information(self.Form,"تصویری وارد نشده!","احتمالا تصویری وارد نکردید یا توکن درست دریافت نشده",QMessageBox.Ok)
                response = requests.post(url, data=payload)
                
                # ذخیره خروجی txt در یک فایل
                if response.status_code == 200:
                    output_text = response.content.decode("utf-8")
                    
                
                    self.textEdit.setPlainText(output_text)
                else:
                    QMessageBox.information(self.Form,"server result",f"نتیجه:\n {output_text}")
        except:
            QMessageBox.information(self.Form,"تصویری وارد نشده!","احتمالا تصویری وارد نکردید یا توکن درست دریافت نشده",QMessageBox.Ok)
    def voicerc(self):
        recognizer = sr.Recognizer()

        # شروع ضبط صدا با کمک میکروفن
        with sr.Microphone() as source:
            QMessageBox.information(self.Form,"درحال تبدیل صدا به متن","  بعد از کلیک بر روی دکمه صحبت کنید ... بعد از پردازش صدای شما و تبدیل شدن به متن، برای تایپ صوتی مجدد باید رو دکمه تایپ صوتی کلیک کنید:",QMessageBox.Ok)
            
            audio = recognizer.listen(source)

        try:
            # تبدیل صدا به متن با استفاده از API گوگل
            text = recognizer.recognize_google(audio, language='fa-IR')
            current_text = self.textEdit.toPlainText()
            new_text = current_text + " " + text
            self.textEdit.setPlainText(new_text)
            self.textEdit.setFocus()
        except sr.UnknownValueError:
            QMessageBox.warning(self.Form,"درحال تبدیل صدا به متن","متوجه نشدم!",QMessageBox.Ok)
            
        except sr.RequestError:
            QMessageBox.warning(self.Form,"درحال تبدیل صدا به متن","خطا در اتصال به سرویس تشخیص گفتار!",QMessageBox.Ok)

            
        
    def convert_audio_to_text(self):
        if not self.recording:
            self.lineEdit_11.setText("درحال تبدیل به متن")

            # آماده‌سازی فایل صوتی برای تبدیل
            audio_file = sr.AudioFile(self.filename)

            # بازکردن فایل صوتی
            with audio_file as source:
                audio = self.recorder.record(source)

            # تبدیل صدا به متن
            try:
                text = self.recorder.recognize_google(audio, language="fa-IR")  # استفاده از سرویس شناسایی گویش Google به زبان فارسی
            except sr.UnknownValueError:
                text = "Unable to recognize speech"
            except sr.RequestError:
                text = "Speech recognition service is unavailable"
            
            # نمایش متن در تکست باکس
            self.textEdit.setPlainText(text)

    def add_word_to_text_edit(self):
        word = self.listWidget.currentItem().text()
        self.textEdit.insertPlainText(word + " ")
        self.textEdit.setFocus()
        
    def addword(self):
        
        word = self.lineEdit_3.text()
        if word:
            self.word_list.append(word)
            item = QListWidgetItem(word)
            self.listWidget.addItem(item)
            self.lineEdit_3.clear()
            


    def showwoed(self,item):
        word = item.text()
        self.plainTextEdit_2.setPlainText(self.plainTextEdit_2.toPlainText()+" "+ word)
        self.plainTextEdit_2.setFocus()

    def remove_word(self):
        selected_item = self.listWidget.currentItem()
        if selected_item:
            
            word = selected_item.text()
            self.word_list.remove(word)
            self.listWidget.takeItem(self.listWidget.row(selected_item))
            if not self.word_list:
                self.remove_button.setEnabled(False)
    
    def save_exel(self):
   
        file_dialog = QFileDialog()
        filepath, _ = file_dialog.getSaveFileName(None, 'ذخیره فایل اکسل', '', 'Excel Files (*.xlsx)')

        # بررسی آیا مسیری انتخاب شده است یا نه
        if filepath:
            # اضافه کردن پسوند فایل اکسل در صورت لزوم
            if not filepath.endswith('.xlsx'):
                filepath += '.xlsx'

            # ایجاد دیتافریم pandas
            df = pd.DataFrame({'Name': [self.lineEdit.text()],
                            'Gender': [self.comboBox.currentText()],
                            'Disease': [self.textEdit.toPlainText()],
                            'phone_number':[self.lineEdit_2.text()]})

            # ذخیره فایل اکسل
            df.to_excel(filepath, index=False)
        
    def load_exel(self):
        
    # باز کردن پنجره فایل بازبینی و انتخاب فایل اکسل
        file_dialog = QFileDialog()
        filepath, _ = file_dialog.getOpenFileName(None, 'انتخاب فایل اکسل', '', 'Excel Files (*.xls *.xlsx)')

        # بررسی آیا فایلی انتخاب شده است یا نه
        if filepath:
            # خواندن فایل اکسل به وسیله pandas
            df = pd.read_excel(filepath)
        try:   
            # استخراج مقادیر از دیتافریم pandas
            name = df['Name'][0]
            gender = df['Gender'][0]
            disease = df['Disease'][0]
            phone_number = df['phone_number'][0]

            # قرار دادن مقادیر در کادرهای مربوطه
            self.lineEdit.setText(str(name))
            self.comboBox.setCurrentText(gender)
            self.textEdit.setPlainText(str(disease))
            self.lineEdit_2.setText(str(phone_number))
            
        except:
                QMessageBox.warning(self.Form,"format error","خطای داده ورودی نامعتبر",QMessageBox.Ok)
            
    def save_txt_note(self,notes):
        
        
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_path, _ = QFileDialog.getSaveFileName(self.Form, 'Save File', '.txt', options = options)
        if file_path:
            if not file_path.endswith('.txt'):
                file_path += '.txt'
            with open(file_path,'w') as f:
                text = self.plainTextEdit_5.toPlainText()
                f.write(text)


    def load_txt_note(self, notes):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_path, _ = QFileDialog.getOpenFileName(self.Form, 'Load File', '', 'Text Files (*.txt)', options=options)
        if file_path:
            with open(file_path, 'r') as f:
                text = f.read()
                self.plainTextEdit_5.setPlainText(text)

    def save_dark_theme_state(self, state):
        dark_theme_enabled = self.checkBox.isChecked()
        settings = {'dark_theme_enabled': dark_theme_enabled}
        with open('settings.json', 'w') as f:
            json.dump(settings, f)
    def load_words(self):
        
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self.Form, 'Open File', '', 'JSON Files (*.json)')
        
        if file_path:
            self.listWidget.clear()
            
            try:
                with open(file_path, 'r') as file:
                    words = json.load(file)
                    self.listWidget.addItems(words)
            except FileNotFoundError:
                pass

    def load_word_list(self):
        try:
        # بارگیری لیست کلمات درست از دیتابیس با فرمت JSON
            with open('data.json', 'r',encoding='utf-8') as file:
                data = json.load(file)
            return data['words']  # فرض بر این است که محتوای فایل JSON شامل کلید "words" است که یک لیست از لغات می‌باشد
        except:
            pass
    def analyze_text(self):
        text = self.textEdit.toPlainText()
        words = text.split()
        misspelled_words = []
        
        for word in words:
            if not self.is_word_correct(word):
                misspelled_words.append(word)

        if len(misspelled_words) > 0:
            QMessageBox.information(self.Form, 'نتیجه تحلیل', f'لغات اشتباه: {"، ".join(misspelled_words)}')
        else:
            QMessageBox.information(self.Form, 'نتیجه تحلیل', 'لغاتی اشتباه نیستند.')

    def is_word_correct(self, word):
        # بررسی املای کلمه با استفاده از لیست کلمات درست
        if word in self.word_list:
            return True
        return False
    
    def darkmode(self,state):
        if state == 2:
            qApp.setStyleSheet(qdarkstyle.load_stylesheet())    
        else:
            qApp.setStyleSheet('')

    def exit(self):
        msgbox = QMessageBox()
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setText("آیا واقعا قصد خروج دارید؟")
        msgbox.setWindowTitle("خروج؟")
        msgbox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        
        returnvalue = msgbox.exec()
        if returnvalue == QMessageBox.Ok:
                sys.exit()
        else:
                pass




    



    def select_files(self):
        file_dialog = QFileDialog()
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        files, _ = file_dialog.getOpenFileNames(
            parent=self.Form)
        if len(files) != 2:
            self.pushButton.setEnabled(False)
            self.selected_files = []
            QMessageBox.information(self.Form, "تعداد فایل نا مهتبر","باید دو فایل انتخاب کنید. ار کلید کنترل برای انتخاب دو فایل استفاده کنید.")
            return
        self.selected_files = files
        file1_content, file2_content = self.read_files(files)
        self.plainTextEdit_2.setPlainText(file1_content)
        self.plainTextEdit.setPlainText(file2_content)
        self.pushButton_27.setEnabled(True)

        file1_hash = self.calculate_file_hash(self.selected_files[0])
        file2_hash = self.calculate_file_hash(self.selected_files[1])
        
        if file1_hash == file2_hash:
            QMessageBox.information(self.Form, "یکسان بودن فایل","هش فایل ها یکسان هستند.")
        else:
            QMessageBox.information(self.Form, "فایل های متفاوت","هش فایل ها متفاوت هستند")
        file1_time = self.get_file_modification_time(self.selected_files[0])
        file2_time = self.get_file_modification_time(self.selected_files[1])
        self.label_7.setText(f"انتخاب فایل:\nزمان تغییر فایل 1: {file1_time}\nزمان تغییر فایل 2: {file2_time}")
        
        
    def read_files(self, files):
        file1_content = ""
        file2_content = ""
        for file_path in files:
            with codecs.open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                content = file.read()
                if file_path == files[0]:
                    file1_content = content
                elif file_path == files[1]:
                    file2_content = content
        return file1_content, file2_content
    def populate_table(self, differences):
        self.model.clear()
        self.model.setHorizontalHeaderLabels(["Column", "Differences"])
        
        row = 0
        for column, values in differences.items():
            column_item = QStandardItem(str(column))
            self.model.setItem(row, 0, column_item)

            if values:
                diff_item = QStandardItem(", ".join(str(item) for item in values))
                diff_item.setBackground(QColor("red"))
                self.model.setItem(row, 1, diff_item)
            
            row += 1
    def calculate_file_hash(self, file_path):
        with open(file_path, 'rb') as file:
            content = file.read()
            file_hash = hashlib.md5(content).hexdigest()
            self.label_14.setText(f"هش فایل اول:{file_hash}")
        return file_hash

    def get_file_modification_time(self, file_path):
        modified_time = os.path.getmtime(file_path)
        formatted_time = datetime.fromtimestamp(modified_time).strftime('%Y-%m-%d %H:%M:%S')
        return formatted_time

 
    def compare_files(self):
        if len(self.selected_files) < 2:
            QMessageBox.warning(self, "Error", "Please select at least 2 files.")
        else:
            selected_file = self.selected_files[1]
            file_extension = os.path.splitext(selected_file)[1]
            changes = None
        try:
            if file_extension == '.txt':
                changes = self.extract_txt_changes(selected_file)

            elif file_extension == ".xlsx":
                changes = self.compare_excel_files(selected_file)

            elif file_extension == '.docx':
                changes = self.extract_docx_changes(selected_file)

            else:
                changes = ["فرمت فایل ها فعلا پشتیبانی نمی‌شود."]

            if changes:
                changes_str = '\n'.join(changes)  # تبدیل لیست به رشته
                self.plainTextEdit_3.setPlainText(changes_str)
                self.colorize_changes(changes)
        except:
            QMessageBox.information(self.Form,"not support!","احتمالا دو فایل با فرمت مختف انتخاب کردبد!")
    def populate_text_browser(self, differences):
        self.plainTextEdit_3.clear()

        if differences:
            for column, values in differences.items():
                self.plainTextEdit_3.append(f"Column: {column}")
                if values:
                    self.plainTextEdit_3.append("Differences:")
                    self.plainTextEdit_3.append(", ".join(str(item) for item in values))

                self.plainTextEdit_3.append("\n")

                
             
    


 


    def compare_excel_files(self, selected_file):
        reference_file = self.selected_files[0]

        df1 = pd.read_excel(reference_file)
        df2 = pd.read_excel(selected_file)
        diff = df1.compare(df2)

        differences = {}
        for column in diff.columns:
            differences[column] = self.extract_farsi_changes(diff[column])

        return differences

    def extract_farsi_changes(self, column_data):
        farsi_changes = []
        for value in column_data:
            if isinstance(value, str):
                words = value.split()
                farsi_words = [word for word in words if self.is_farsi_word(word)]
                farsi_changes.extend(farsi_words)
        return farsi_changes

    def is_farsi_word(self, word):
        for char in word:
            if not char.isalpha() or not 'ا' <= char <= 'ی':
                return False
        return True

        
            
            
    def extract_txt_changes(self, selected_file, reference_file):
        with open(reference_file, 'r', encoding='utf-8') as ref_file:
            reference_content = ref_file.readlines()

        with open(selected_file, 'r', encoding='utf-8') as sel_file:
            selected_content = sel_file.readlines()

        diff = difflib.unified_diff(
            reference_content, selected_content, lineterm='')
        changes = list(diff)
        return changes

  
    def extract_docx_changes(self, selected_file, reference_file):
        ref_doc = Document(reference_file)
        sel_doc = Document(selected_file)

        changes = []
        for i in range(min(len(ref_doc.paragraphs), len(sel_doc.paragraphs))):
            ref_paragraph = ref_doc.paragraphs[i].text
            sel_paragraph = sel_doc.paragraphs[i].text

            if ref_paragraph != sel_paragraph:
                changes.append(f"تغییر در پاراگراف {i+1}")

        return changes

    def colorize_changes(self, changes):
        font = QtGui.QFont()
        font.setFamily("Arial")
        for change in changes:
            if change.startswith('-'):
                self.plainTextEdit_3.setTextColor(QtGui.QColor("red"))
                self.plainTextEdit_3.setFontWeight(QtGui.QFont.Bold)
            elif change.startswith('+'):
                self.plainTextEdit_3.setTextColor(QtGui.QColor("green"))
                self.plainTextEdit_3.setFontWeight(QtGui.QFont.Bold)
            else:
                self.plainTextEdit_3.setTextColor(QtGui.QColor("black"))
                self.plainTextEdit_3.setFontWeight(QtGui.QFont.Normal)
            self.plainTextEdit_3.insertPlainText(change)
            self.plainTextEdit_3.insertPlainText("\n")

    def read_words_from_file(self, file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            words = data["words"]
        return words
    
    def read_words_from(self):
        with open('data.json', encoding="utf-8") as file:
                data = json.load(file)
                words = data['words']

        self.text_edit = QtWidgets.QPlainTextEdit(self.Form)
        self.text_edit.resize(400,400)
        self.text_edit.setPlainText(json.dumps(words, ensure_ascii=False, indent=4))
        self.text_edit.setReadOnly(True)
        self.text_edit.show()

        self.close_button = QtWidgets.QPushButton("Close", self.Form)
        self.close_button.move(420, 10)
        self.close_button.clicked.connect(self.close_win)

    def close_win(self):
             self.text_edit.close()
        
    def save_words(self):
       
        words = [self.listWidget.item(i).text() for i in range(self.listWidget.count())]
        
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getSaveFileName(self.Form, 'Save File', '', 'JSON Files (*.json)')
        
        if file_path:
            with open(file_path, 'w') as file:
                json.dump(words, file)        
        
                  
            
    def add_word_to_file(self):
        word = self.lineEdit_10.text()
        with open("data.json", "r", encoding="utf-8") as file:
            data = json.load(file)
            words = data["words"]
            words.append(word)
            QMessageBox.information(self.Form,"لغت اضافه شد","لغت شما به پایگاه اضافه شد")

        with open("data.json", "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False)

        completer = QCompleter(words)
        completer.setCaseSensitivity(Qt.CaseInsensitive)
        self.lineEdit.setCompleter(completer)


    def open_webview(self):
        self.webview = QWebEngineView()
        self.webview.load(QUrl("https://virusscan.jotti.org/en-US/scan-file"))  # آدرس سایت موردنظر را وارد کنید
        self.webview.show()


    def send_message(self):
        try:
            message = self.lineEdit_7.text()
            self.client_socket.send(message.encode())
            self.plainTextEdit_4.appendPlainText("You: " + message)
            self.lineEdit_7.clear()
        except:
            pass

    def choose_file(self):
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_path = file_dialog.getOpenFileName(self, "Select File")[0]
        self.send_file(file_path)

    def send_file(self, file_path):
        with open(file_path, "rb") as file:
            file_data = file.read()

        self.client_socket.send(file_data)
        self.plainTextEdit_4.append("You sent a file: " + file_path)

    def display_message(self, message):
        self.plainTextEdit_4.appendPlainText("Server: " + message)
    
    


    def save_to_database(self):
      """Saves patient information to a specified SQLite database."""

    # Get patient data from UI elements
      name = self.lineEdit.text()
      gender = self.comboBox.currentText()
      disease = self.textEdit.toPlainText()
      phone_number = self.lineEdit_2.text()
      national_code = self.lineEdit_12.text()

    # Validate user input (optional)
    # You can add checks for non-empty fields, valid phone number format, etc.

    # Select database file using a file dialog
      file_dialog = QFileDialog()
      filepath, _ = file_dialog.getSaveFileName(None, 'Save to Database', '', 'SQLite Files (*.db)')

    # Check if a file path is selected
      if not filepath:
          return  # Handle case where user cancels file selection

    # Connect to the database
      try:
          conn = sqlite3.connect(filepath)
      except sqlite3.Error as e:
          QMessageBox.critical(self.Form, "Error", f"Connection error: {e}")
          return

    # Create table if it doesn't exist
      try:
          cursor = conn.cursor()
          cursor.execute("""
              CREATE TABLE IF NOT EXISTS Patients (
                  ID INTEGER PRIMARY KEY AUTOINCREMENT,
                  Name TEXT NOT NULL,
                  Gender TEXT NOT NULL,
                  Disease TEXT NOT NULL,
                  Phone_Number TEXT,
                  National_code TEXT UNIQUE
              )
          """)
          conn.commit()
      except sqlite3.Error as e:
          QMessageBox.critical(self.Form, "Error", f"Table creation error: {e}")
          conn.close()
          return

    # Create a DataFrame
      df = pd.DataFrame({
          'Name': [name],
          'Gender': [gender],
          'Disease': [disease],
          'Phone_Number': [phone_number],
          'National_code': [national_code]
      })

    # Insert data into the table
      try:
          df.to_sql('Patients', conn, if_exists='append', index=False)
          conn.commit()
          QMessageBox.information(self.Form, "Success", "Patient information saved successfully.")
      except sqlite3.Error as e:
          QMessageBox.critical(self.Form, "Error", f"Insertion error: {e}")
          conn.rollback()  # Revert changes if insertion fails

    # Close the connection
      conn.close()



    def fetch_from_database(self):
        # Open a file dialog to select the database file
      file_dialog = QFileDialog()
      filepath, _ = file_dialog.getOpenFileName(None, 'Open Database', '', 'SQLite Files (*.db)')
    
    # Check if a file path is selected
      if filepath:
        # Connect to the database
          conn = sqlite3.connect(filepath)
          cursor = conn.cursor()
        
          try:
            # Execute a query to fetch data from the database table
              cursor.execute("SELECT * FROM Patients")
              rows = cursor.fetchall()
            
            # Close the cursor and connection
              cursor.close()
              conn.close()
            
            # Return the fetched data
              return rows
          except sqlite3.Error as e:
            # Handle errors if any
              print("Error fetching data from database:", e)
              return None
    def load_from_database(self):
    # Open a file dialog to select the database file
     file_dialog = QFileDialog()
     filepath, _ = file_dialog.getOpenFileName(None, 'Select Database', '', 'SQLite Files (*.db)')
    
    # Check if a file path is selected
     if filepath:
        # Connect to the database
         conn = sqlite3.connect(filepath)
        
        # Get mobile number and national code from text boxes
         mobile_number = self.lineEdit_12.text()
         national_code = self.lineEdit_14.text()
        
         try:
            # Execute a query to fetch data from the database table
             query = "SELECT * FROM Patients WHERE Phone_Number=? AND National_code=?"
             cursor = conn.cursor()
             cursor.execute(query, (mobile_number, national_code))
             row = cursor.fetchone()
            
             if row:
                # Fill the form fields with fetched data
                 self.lineEdit.setText(row[1])  # Assuming name is in the second column
                 self.comboBox.setCurrentText(row[2])  # Assuming gender is in the third column
                 self.textEdit.setPlainText(row[3])  # Assuming disease is in the fourth column
                 self.lineEdit_2.setText(row[4])  # Assuming phone number is in the fifth column
                # Assuming national code is in the sixth column
                 self.lineEdit_12.setText(row[5])
             else:
                 QMessageBox.warning(self.Form, "Error", "No data found for the given mobile number and national code.", QMessageBox.Ok)
            
            # Close the cursor and connection
             cursor.close()
             conn.close()
            
         except sqlite3.Error as e:
             QMessageBox.warning(self, "Error", f"Error loading data from database: {str(e)}", QMessageBox.Ok)
    def load_database(self):
        # Open file dialog to select database file
        file_dialog = QFileDialog()
        filepath, _ = file_dialog.getOpenFileName(None, 'Select Database', '', 'SQLite Files (*.db)')

        # Check if a file path is selected
        if not filepath:
            return  # Handle case where user cancels file selection

        # Save the database path
        self.database_path = filepath

        # Save path to settings file (optional)
        config = ConfigParser()
        config['DEFAULT']['database_path'] = self.database_path
        with open('settings.ini', 'w') as configfile:
            config.write(configfile)

        # Connect to the database
        try:
            conn = sqlite3.connect(self.database_path)
        except sqlite3.Error as e:
            QMessageBox.critical(self, "Error", f"Connection error: {e}")
            self.database_path = None

    def add_to_database(self):
        """Adds new patient information to the existing database."""

        # Get patient data from UI elements
        name = self.lineEdit.text()
        gender = self.comboBox.currentText()
        disease = self.textEdit.toPlainText()
        phone_number = self.lineEdit_2.text()
        national_code = self.lineEdit_12.text()

    # Validate user input (optional)
    # You can add checks for non-empty fields, valid phone number format, etc.

    # Select database file using a file dialog (optional)
    # This can be omitted if the database file is already known and selected.

        file_dialog = QFileDialog()
        filepath, _ = file_dialog.getOpenFileName(None, 'Select Database', '', 'SQLite Files (*.db)')

    # Check if a file path is selected
        if not filepath:
            return  # Handle case where user cancels file selection

    # Connect to the database
        try:
            conn = sqlite3.connect(filepath)
        except sqlite3.Error as e:
            QMessageBox.critical(self.Form, "Error", f"Connection error: {e}")
            return

    # Create a DataFrame
        df = pd.DataFrame({
            'Name': [name],
            'Gender': [gender],
            'Disease': [disease],
            'Phone_Number': [phone_number],
            'National_code': [national_code]
        })

    # Append data to the table
        try:
            df.to_sql('Patients', conn, if_exists='append', index=False)
            conn.commit()
            QMessageBox.information(self.Form, "Success", "Patient information added successfully.")
        except sqlite3.Error as e:
            QMessageBox.critical(self.Form, "Error", f"Insertion error: {e}")
            conn.rollback()  # Revert changes if insertion fails

    # Close the connection
        conn.close()


    def find_user(self):
        """Searches for a user in the database and loads their information.

        Raises:
            ValueError: If no user is found with the given information.
        """

        # Check if database path is already set
        if not self.database_path:
            QMessageBox.critical(self.Form, "Error", "Please load the database first.")
            return

    # Get user input
        national_code = self.lineEdit_13.text()
        phone_number = self.lineEdit_14.text()

    # Connect to the database
        try:
            conn = sqlite3.connect(self.database_path)
        except sqlite3.Error as e:
            QMessageBox.critical(self.Form, "Error", f"Connection error: {e}")
            return

    # Create a query
        query = """
            SELECT * FROM Patients
            WHERE National_code = ? AND Phone_Number = ?
        """

    # Execute the query with parameters
        try:
            cursor = conn.cursor()
            cursor.execute(query, (national_code, phone_number))
            result = cursor.fetchone()  # Get the first (and only) matching row
        except sqlite3.Error as e:
            QMessageBox.critical(self.Form, "Error", f"Query error: {e}")
            conn.close()
            return

    # Close the connection
        conn.close()

    # Check if user was found
        if result is None:
            QMessageBox.information(self.Form, "کاربر یافت نشد", "کاربری در پایگاه داده یافت نشد")
            return
        
            
        data = [str(item) for item in result[:]]  # Convert result items to strings
        text = ", \n".join(data)  # Join the items into a comma-separated string
        self.plainTextEdit_6.setPlainText(text)

    # Show a message to confirm loading data into the form
        response = QMessageBox.question(self.Form, "Load Data", "آیا میخواهید اطلاعات در فرم لود شود؟",
                                    QMessageBox.Ok | QMessageBox.Cancel)

        if response == QMessageBox.Ok:
        # Load data into the form
            self.lineEdit.setText(result[1])
            self.comboBox.setCurrentText(result[2])
            self.textEdit.setText(result[3])
            self.lineEdit_2.setText(result[4])
            if len(result) >= 6:
                self.lineEdit_12.setText(result[5])
            else:
        # Show a message indicating missing information
                QMessageBox.information(self.Form, "Info", "Some information is missing for this user.")
            

        # Show a message to confirm data loading
            QMessageBox.information(self.Form, "موفقیت", "اطلاعات با موفقیت وارد فرم شد")
    def open_register_dialog(self):
        register_dialog = RegisterDialog()
        register_dialog.exec_()

    def open_delete_data_dialog(self):
        delete_data_dialog = DeleteDataDialog()
        delete_data_dialog.exec_()
    def save_dark_theme_state(self, state):
        dark_theme_enabled = self.checkBox.isChecked()
        settings = {'dark_theme_enabled': dark_theme_enabled}
        with open('settings.json', 'w') as f:
            json.dump(settings, f)
            if state == 2:
                qApp.setStyleSheet(qdarkstyle.load_stylesheet())    
            else:
                qApp.setStyleSheet('')
    def select_database_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self.Form, "Select Database File", "", "SQLite Database Files (*.db *.sqlite *.sqlite3)") 
        if file_path:
                self.database_path = file_path
                self.conn = sqlite3.connect(self.database_path)
                self.lineEdit_5.setText(self.database_path)
        else:
                file_pt,_ = self.lineEdit_5.text()  # Get text from lineEdit_5
                if file_pt:
                        self.database_path = file_pt
                        self.conn = sqlite3.connect(self.database_path)
    def load_dark_theme_state(self):
        try:
            with open('settings.json', 'r') as f:
                settings = json.load(f)
                dark_theme_enabled = settings.get('dark_theme_enabled', False)
                self.checkBox.setChecked(dark_theme_enabled)
        except FileNotFoundError:
            # If no saved settings file is found, default to unchecked
            self.checkBox.setChecked(False)           
    

   
    def lock_application(self, state):
        if state == QtCore.Qt.Checked:
            # Disable the checkbox before showing the login dialog
            self.checkBox_2.setEnabled(False)

            self.login_dialog = LoginDialog()

            # Use exec_() instead of exec to get the return value
            # indicating how the dialog was closed
            result = self.login_dialog.exec_()

            # Only enable the checkbox and close the dialog
            # if the login was successful
            if result == QDialog.Accepted:
                self.checkBox_2.setEnabled(True)
                self.login_dialog.close()
                
            else:
                
                QMessageBox.warning(self.Form,'اطلاعات ناقص!','برنامه بسته میشود شما رمز را وارد نکردید')
                qApp.quit()

if __name__ == '__main__':
        import sys
        app = QtWidgets.QApplication(sys.argv)
        login_dialog = LoginDialog()
        result = login_dialog.exec_()
        if result == QtWidgets.QDialog.Accepted:
            
        
            win = QtWidgets.QWidget()
            main_window = QMainWindow()
            ui = Ui_Form()
            ui.setupUi(win)
            win.show()
            ui.main_window = main_window
            app.exec_()